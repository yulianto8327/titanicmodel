{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"},{"sourceId":10242375,"sourceType":"datasetVersion","datasetId":6334113},{"sourceId":10242496,"sourceType":"datasetVersion","datasetId":6334187},{"sourceId":10242649,"sourceType":"datasetVersion","datasetId":6334286},{"sourceId":10243179,"sourceType":"datasetVersion","datasetId":6334476}],"dockerImageVersionId":29507,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/yuliantow/titanic-tutorial?scriptVersionId=213938706\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\ntrain_data = pd.read_csv(\"/kaggle/input/titanic-agegroup-simple-fare-rate/train - train (4).csv\")\ntrain_data.head()\ntest_data = pd.read_csv(\"/kaggle/input/titanic-agegroup-simple-fare-rate/test - test (4).csv\")\ntest_data.head()\n\n#\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"AgeGroup\", \"Embarked\", \"FareRate\"\n\n########################################################\n# Calculate survival probabilities by Pclass\nsurvival_by_pclass = train_data.groupby('Pclass')['Survived'].mean().reset_index()\n\n# Plotting\nplt.figure(figsize=(8, 6))\nsns.barplot(data=survival_by_pclass, x='Pclass', y='Survived', palette='viridis')\n\n# Customize the plot\nplt.title(\"Survival Probability by Pclass\", fontsize=16)\nplt.xlabel(\"Passenger Class (Pclass)\", fontsize=14)\nplt.ylabel(\"Survival Probability\", fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\n# Show the plot\nplt.show()\n\n########################################################\n# Calculate survival probabilities by Sex\nsurvival_by_pclass = train_data.groupby('Sex')['Survived'].mean().reset_index()\n\n# Plotting\nplt.figure(figsize=(8, 6))\nsns.barplot(data=survival_by_pclass, x='Sex', y='Survived', palette='viridis')\n\n# Customize the plot\nplt.title(\"Survival Probability by Sex\", fontsize=16)\nplt.xlabel(\"Passenger Class (Sex)\", fontsize=14)\nplt.ylabel(\"Survival Probability\", fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\n# Show the plot\nplt.show()\n\n########################################################\n# Calculate survival probabilities by SibSp\nsurvival_by_pclass = train_data.groupby('SibSp')['Survived'].mean().reset_index()\n\n# Plotting\nplt.figure(figsize=(8, 6))\nsns.barplot(data=survival_by_pclass, x='SibSp', y='Survived', palette='viridis')\n\n# Customize the plot\nplt.title(\"Survival Probability by SibSp\", fontsize=16)\nplt.xlabel(\"Passenger Class (SibSp)\", fontsize=14)\nplt.ylabel(\"Survival Probability\", fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\n# Show the plot\nplt.show()\n\n########################################################\n# Calculate survival probabilities by Parch\nsurvival_by_pclass = train_data.groupby('Parch')['Survived'].mean().reset_index()\n\n# Plotting\nplt.figure(figsize=(8, 6))\nsns.barplot(data=survival_by_pclass, x='Parch', y='Survived', palette='viridis')\n\n# Customize the plot\nplt.title(\"Survival Probability by Parch\", fontsize=16)\nplt.xlabel(\"Passenger Class (Parch)\", fontsize=14)\nplt.ylabel(\"Survival Probability\", fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\n# Show the plot\nplt.show()\n\n########################################################\n# Calculate survival probabilities by Embarked\nsurvival_by_pclass = train_data.groupby('Embarked')['Survived'].mean().reset_index()\n\n# Plotting\nplt.figure(figsize=(8, 6))\nsns.barplot(data=survival_by_pclass, x='Embarked', y='Survived', palette='viridis')\n\n# Customize the plot\nplt.title(\"Survival Probability by Embarked\", fontsize=16)\nplt.xlabel(\"Passenger Class (Embarked)\", fontsize=14)\nplt.ylabel(\"Survival Probability\", fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\n# Show the plot\nplt.show()\n\n########################################################\nfor age_group in range(5):  # Loop through AgeGroup values from 0 to 9\n    survived_age_group = train_data.loc[train_data.AgeGroup == age_group][ \"Survived\"]\n    \n    if len(survived_age_group) > 0:  # Avoid division by zero\n        survived_age_group_rate = sum(survived_age_group) / len(survived_age_group)\n        print(f\"% of AgeGroup {age_group} and survived: {survived_age_group_rate:.2%}\")\n    else:\n        print(f\"AgeGroup {age_group} : No data available.\")\n\n# Create FareRate bins ($0-$10, $11-$20, ..., $91-$100)\nfare_bins = range(0, 101, 10)  # From 0 to 100, step of 10\nfare_labels = [f\"${i}-{i+10}\" for i in fare_bins[:-1]]  # Label bins (e.g., \"$0-$10\")\n\n# Add a new column to categorize fares into bins\ntrain_data['FareRate'] = pd.cut(train_data['Fare'], bins=fare_bins, labels=fare_labels, right=False)\n\n# Calculate survival rate for each FareRate bin\nsurvival_rates = []\nfor fare_rate in fare_labels:\n    fare_data = train_data.loc[train_data.FareRate == fare_rate][\"Survived\"]\n    if len(fare_data) > 0:  # Avoid division by zero\n        survival_rate = sum(fare_data) / len(fare_data)\n    else:\n        survival_rate = 0  # Handle cases with no data\n    survival_rates.append(survival_rate)\n\n# Plot the results\nplt.figure(figsize=(12, 6))\nplt.bar(fare_labels, survival_rates, color='skyblue')\nplt.title('Survival Rate by Fare Rate', fontsize=16)\nplt.xlabel('Fare Rate Range', fontsize=12)\nplt.ylabel('Survival Rate', fontsize=12)\nplt.ylim(0, 1)  # Survival rate is between 0 and 1\nplt.xticks(rotation=45, fontsize=10)\nplt.yticks(fontsize=10)\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T23:36:32.425938Z","iopub.execute_input":"2024-12-19T23:36:32.426267Z","iopub.status.idle":"2024-12-19T23:36:33.597373Z","shell.execute_reply.started":"2024-12-19T23:36:32.426222Z","shell.execute_reply":"2024-12-19T23:36:33.596413Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n\n## Your first machine learning model\n\nWe'll build what's known as a **random forest model**.  This model is constructed of several \"trees\" (there are three trees in the picture below, but we'll construct 100!) that will individually consider each passenger's data and vote on whether the individual survived.  Then, the random forest model makes a democratic decision: the outcome with the most votes wins!\n\n![](https://i.imgur.com/AC9Bq63.png)\n\nThe code cell below looks for patterns in four different columns (**\"Pclass\"**, **\"Sex\"**, **\"SibSp\"**, and **\"Parch\"**) of the data.  It constructs the trees in the random forest model based on patterns in the **train.csv** file, before generating predictions for the passengers in **test.csv**.  The code also saves these new predictions in a CSV file **submission.csv**.\n\nCopy this code into your notebook, and run it in a new code cell.","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"AgeGroup\", \"Embarked\", \"FareRate\"]\n\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nX_test = X_test.reindex(columns=X.columns, fill_value=0)\n\nmodel = RandomForestClassifier(n_estimators=500,random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","metadata":{"_kg_hide-output":false,"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T23:31:35.421462Z","iopub.status.idle":"2024-12-19T23:31:35.421875Z","shell.execute_reply":"2024-12-19T23:31:35.421646Z"}},"outputs":[],"execution_count":null}]}